--- liballoc_1_1.c
+++ liballoc_1_1.c
@@ -238,7 +238,7 @@
 	
 
 
-void *PREFIX(malloc)(size_t req_size)
+void *LIBALLOC_PREFIX(malloc)(size_t req_size)
 {
 	int startedBet = 0;
 	unsigned long long bestSize = 0;
@@ -268,7 +268,7 @@
 		FLUSH();
 		#endif
 		liballoc_unlock();
-		return PREFIX(malloc)(1);
+		return LIBALLOC_PREFIX(malloc)(1);
 	}
 	
 
@@ -302,7 +302,7 @@
 
 
 	#ifdef DEBUG
-	printf( "liballoc: %x PREFIX(malloc)( %i ): ", 
+	printf( "liballoc: %x LIBALLOC_PREFIX(malloc)( %i ): ", 
 					__builtin_return_address(0),
 					size );
 	FLUSH();
@@ -576,7 +576,7 @@
 	FLUSH();
 	#endif
 	#if defined DEBUG || defined INFO
-	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
+	printf( "liballoc: WARNING: LIBALLOC_PREFIX(malloc)( %i ) returning NULL.\n", size);
 	liballoc_dump();
 	FLUSH();
 	#endif
@@ -591,7 +591,7 @@
 
 
 
-void PREFIX(free)(void *ptr)
+void LIBALLOC_PREFIX(free)(void *ptr)
 {
 	struct liballoc_minor *min;
 	struct liballoc_major *maj;
@@ -600,7 +600,7 @@
 	{
 		l_warningCount += 1;
 		#if defined DEBUG || defined INFO
-		printf( "liballoc: WARNING: PREFIX(free)( NULL ) called from %x\n",
+		printf( "liballoc: WARNING: LIBALLOC_PREFIX(free)( NULL ) called from %x\n",
 							__builtin_return_address(0) );
 		FLUSH();
 		#endif
@@ -639,7 +639,7 @@
 		if ( min->magic == LIBALLOC_DEAD )
 		{
 			#if defined DEBUG || defined INFO
-			printf( "liballoc: ERROR: multiple PREFIX(free)() attempt on %x from %x.\n", 
+			printf( "liballoc: ERROR: multiple LIBALLOC_PREFIX(free)() attempt on %x from %x.\n", 
 									ptr,
 									__builtin_return_address(0) );
 			FLUSH();
@@ -648,7 +648,7 @@
 		else
 		{
 			#if defined DEBUG || defined INFO
-			printf( "liballoc: ERROR: Bad PREFIX(free)( %x ) called from %x\n",
+			printf( "liballoc: ERROR: Bad LIBALLOC_PREFIX(free)( %x ) called from %x\n",
 								ptr,
 								__builtin_return_address(0) );
 			FLUSH();
@@ -661,7 +661,7 @@
 	}
 
 	#ifdef DEBUG
-	printf( "liballoc: %x PREFIX(free)( %x ): ", 
+	printf( "liballoc: %x LIBALLOC_PREFIX(free)( %x ): ", 
 				__builtin_return_address( 0 ),
 				ptr );
 	FLUSH();
@@ -720,14 +720,14 @@
 
 
 
-void* PREFIX(calloc)(size_t nobj, size_t size)
+void* LIBALLOC_PREFIX(calloc)(size_t nobj, size_t size)
 {
        int real_size;
        void *p;
 
        real_size = nobj * size;
        
-       p = PREFIX(malloc)( real_size );
+       p = LIBALLOC_PREFIX(malloc)( real_size );
 
        liballoc_memset( p, 0, real_size );
 
@@ -736,7 +736,7 @@
 
 
 
-void*   PREFIX(realloc)(void *p, size_t size)
+void*   LIBALLOC_PREFIX(realloc)(void *p, size_t size)
 {
 	void *ptr;
 	struct liballoc_minor *min;
@@ -745,12 +745,12 @@
 	// Honour the case of size == 0 => free old and return NULL
 	if ( size == 0 )
 	{
-		PREFIX(free)( p );
+		LIBALLOC_PREFIX(free)( p );
 		return NULL;
 	}
 
 	// In the case of a NULL pointer, return a simple malloc.
-	if ( p == NULL ) return PREFIX(malloc)( size );
+	if ( p == NULL ) return LIBALLOC_PREFIX(malloc)( size );
 
 	// Unalign the pointer if required.
 	ptr = p;
@@ -785,7 +785,7 @@
 			if ( min->magic == LIBALLOC_DEAD )
 			{
 				#if defined DEBUG || defined INFO
-				printf( "liballoc: ERROR: multiple PREFIX(free)() attempt on %x from %x.\n", 
+				printf( "liballoc: ERROR: multiple LIBALLOC_PREFIX(free)() attempt on %x from %x.\n", 
 										ptr,
 										__builtin_return_address(0) );
 				FLUSH();
@@ -794,7 +794,7 @@
 			else
 			{
 				#if defined DEBUG || defined INFO
-				printf( "liballoc: ERROR: Bad PREFIX(free)( %x ) called from %x\n",
+				printf( "liballoc: ERROR: Bad LIBALLOC_PREFIX(free)( %x ) called from %x\n",
 									ptr,
 									__builtin_return_address(0) );
 				FLUSH();
@@ -820,9 +820,9 @@
 	liballoc_unlock();
 
 	// If we got here then we're reallocating to a block bigger than us.
-	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
+	ptr = LIBALLOC_PREFIX(malloc)( size );					// We need to allocate new memory
 	liballoc_memcpy( ptr, p, real_size );
-	PREFIX(free)( p );
+	LIBALLOC_PREFIX(free)( p );
 
 	return ptr;
 }
